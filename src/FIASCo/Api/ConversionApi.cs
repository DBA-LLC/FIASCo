/*
 * SPAS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FIASCo.Client;
using FIASCo.Model;

namespace FIASCo.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConversionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Добавить данные в задачу на конвертацию адресов
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addConversionDataInput">Входные параметры (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResult</returns>
        SuccessResult ApiSpasV20AddConversionDataPost(AddConversionDataInput addConversionDataInput = default(AddConversionDataInput), int operationIndex = 0);

        /// <summary>
        /// Добавить данные в задачу на конвертацию адресов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addConversionDataInput">Входные параметры (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> ApiSpasV20AddConversionDataPostWithHttpInfo(AddConversionDataInput addConversionDataInput = default(AddConversionDataInput), int operationIndex = 0);
        /// <summary>
        /// Отменить задачу на конвертацию адресов
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResult</returns>
        SuccessResult ApiSpasV20CancelConversionTaskGet(Guid? taskGuid = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Отменить задачу на конвертацию адресов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> ApiSpasV20CancelConversionTaskGetWithHttpInfo(Guid? taskGuid = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Создать задачу на конвертацию адресов
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateConversionTaskResult</returns>
        CreateConversionTaskResult ApiSpasV20CreateConversionTaskGet(int operationIndex = 0);

        /// <summary>
        /// Создать задачу на конвертацию адресов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateConversionTaskResult</returns>
        ApiResponse<CreateConversionTaskResult> ApiSpasV20CreateConversionTaskGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Получить статус задачи и статистику выполнения
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConversionTaskStatusAndStatistics</returns>
        ConversionTaskStatusAndStatistics ApiSpasV20GetConversionTaskStatusGet(Guid? taskGuid = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Получить статус задачи и статистику выполнения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConversionTaskStatusAndStatistics</returns>
        ApiResponse<ConversionTaskStatusAndStatistics> ApiSpasV20GetConversionTaskStatusGetWithHttpInfo(Guid? taskGuid = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Получить блок идентификаторов адресных элементов, полученных при конвертации
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="blockIndex">Номер блока данных (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvertionResultBlockResult</returns>
        ConvertionResultBlockResult ApiSpasV20GetConvertionResultBlockGet(Guid? taskGuid = default(Guid?), long? blockIndex = default(long?), int operationIndex = 0);

        /// <summary>
        /// Получить блок идентификаторов адресных элементов, полученных при конвертации
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="blockIndex">Номер блока данных (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvertionResultBlockResult</returns>
        ApiResponse<ConvertionResultBlockResult> ApiSpasV20GetConvertionResultBlockGetWithHttpInfo(Guid? taskGuid = default(Guid?), long? blockIndex = default(long?), int operationIndex = 0);
        /// <summary>
        /// Поиск объекта ФИАС по частям его адреса
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredAddress">Входные данные (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchByPartsResult</returns>
        SearchByPartsResult ApiSpasV20SearchByPartsPost(StructuredAddress structuredAddress = default(StructuredAddress), int operationIndex = 0);

        /// <summary>
        /// Поиск объекта ФИАС по частям его адреса
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredAddress">Входные данные (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchByPartsResult</returns>
        ApiResponse<SearchByPartsResult> ApiSpasV20SearchByPartsPostWithHttpInfo(StructuredAddress structuredAddress = default(StructuredAddress), int operationIndex = 0);
        /// <summary>
        /// Запустить задачу на конвертацию адресов
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResult</returns>
        SuccessResult ApiSpasV20StartConversionTaskGet(Guid? taskGuid = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// Запустить задачу на конвертацию адресов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        ApiResponse<SuccessResult> ApiSpasV20StartConversionTaskGetWithHttpInfo(Guid? taskGuid = default(Guid?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConversionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Добавить данные в задачу на конвертацию адресов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addConversionDataInput">Входные параметры (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> ApiSpasV20AddConversionDataPostAsync(AddConversionDataInput addConversionDataInput = default(AddConversionDataInput), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Добавить данные в задачу на конвертацию адресов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addConversionDataInput">Входные параметры (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> ApiSpasV20AddConversionDataPostWithHttpInfoAsync(AddConversionDataInput addConversionDataInput = default(AddConversionDataInput), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Отменить задачу на конвертацию адресов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> ApiSpasV20CancelConversionTaskGetAsync(Guid? taskGuid = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Отменить задачу на конвертацию адресов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> ApiSpasV20CancelConversionTaskGetWithHttpInfoAsync(Guid? taskGuid = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Создать задачу на конвертацию адресов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateConversionTaskResult</returns>
        System.Threading.Tasks.Task<CreateConversionTaskResult> ApiSpasV20CreateConversionTaskGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Создать задачу на конвертацию адресов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateConversionTaskResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateConversionTaskResult>> ApiSpasV20CreateConversionTaskGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Получить статус задачи и статистику выполнения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConversionTaskStatusAndStatistics</returns>
        System.Threading.Tasks.Task<ConversionTaskStatusAndStatistics> ApiSpasV20GetConversionTaskStatusGetAsync(Guid? taskGuid = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Получить статус задачи и статистику выполнения
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConversionTaskStatusAndStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConversionTaskStatusAndStatistics>> ApiSpasV20GetConversionTaskStatusGetWithHttpInfoAsync(Guid? taskGuid = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Получить блок идентификаторов адресных элементов, полученных при конвертации
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="blockIndex">Номер блока данных (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvertionResultBlockResult</returns>
        System.Threading.Tasks.Task<ConvertionResultBlockResult> ApiSpasV20GetConvertionResultBlockGetAsync(Guid? taskGuid = default(Guid?), long? blockIndex = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Получить блок идентификаторов адресных элементов, полученных при конвертации
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="blockIndex">Номер блока данных (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvertionResultBlockResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertionResultBlockResult>> ApiSpasV20GetConvertionResultBlockGetWithHttpInfoAsync(Guid? taskGuid = default(Guid?), long? blockIndex = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Поиск объекта ФИАС по частям его адреса
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredAddress">Входные данные (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchByPartsResult</returns>
        System.Threading.Tasks.Task<SearchByPartsResult> ApiSpasV20SearchByPartsPostAsync(StructuredAddress structuredAddress = default(StructuredAddress), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Поиск объекта ФИАС по частям его адреса
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredAddress">Входные данные (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchByPartsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchByPartsResult>> ApiSpasV20SearchByPartsPostWithHttpInfoAsync(StructuredAddress structuredAddress = default(StructuredAddress), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Запустить задачу на конвертацию адресов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResult</returns>
        System.Threading.Tasks.Task<SuccessResult> ApiSpasV20StartConversionTaskGetAsync(Guid? taskGuid = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Запустить задачу на конвертацию адресов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResult>> ApiSpasV20StartConversionTaskGetWithHttpInfoAsync(Guid? taskGuid = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConversionApi : IConversionApiSync, IConversionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConversionApi : IConversionApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConversionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConversionApi(string basePath)
        {
            this.Configuration = FIASCo.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FIASCo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConversionApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FIASCo.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FIASCo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ConversionApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FIASCo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Добавить данные в задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addConversionDataInput">Входные параметры (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult ApiSpasV20AddConversionDataPost(AddConversionDataInput addConversionDataInput = default(AddConversionDataInput), int operationIndex = 0)
        {
            ApiResponse<SuccessResult> localVarResponse = ApiSpasV20AddConversionDataPostWithHttpInfo(addConversionDataInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Добавить данные в задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addConversionDataInput">Входные параметры (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse<SuccessResult> ApiSpasV20AddConversionDataPostWithHttpInfo(AddConversionDataInput addConversionDataInput = default(AddConversionDataInput), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addConversionDataInput;

            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20AddConversionDataPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SuccessResult>("/api/spas/v2.0/AddConversionData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20AddConversionDataPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Добавить данные в задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addConversionDataInput">Входные параметры (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> ApiSpasV20AddConversionDataPostAsync(AddConversionDataInput addConversionDataInput = default(AddConversionDataInput), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<SuccessResult> localVarResponse = await ApiSpasV20AddConversionDataPostWithHttpInfoAsync(addConversionDataInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Добавить данные в задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addConversionDataInput">Входные параметры (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> ApiSpasV20AddConversionDataPostWithHttpInfoAsync(AddConversionDataInput addConversionDataInput = default(AddConversionDataInput), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addConversionDataInput;

            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20AddConversionDataPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SuccessResult>("/api/spas/v2.0/AddConversionData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20AddConversionDataPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Отменить задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult ApiSpasV20CancelConversionTaskGet(Guid? taskGuid = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<SuccessResult> localVarResponse = ApiSpasV20CancelConversionTaskGetWithHttpInfo(taskGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Отменить задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse<SuccessResult> ApiSpasV20CancelConversionTaskGetWithHttpInfo(Guid? taskGuid = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskGuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "task_guid", taskGuid));
            }

            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20CancelConversionTaskGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SuccessResult>("/api/spas/v2.0/CancelConversionTask", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20CancelConversionTaskGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Отменить задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> ApiSpasV20CancelConversionTaskGetAsync(Guid? taskGuid = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<SuccessResult> localVarResponse = await ApiSpasV20CancelConversionTaskGetWithHttpInfoAsync(taskGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Отменить задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> ApiSpasV20CancelConversionTaskGetWithHttpInfoAsync(Guid? taskGuid = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskGuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "task_guid", taskGuid));
            }

            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20CancelConversionTaskGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SuccessResult>("/api/spas/v2.0/CancelConversionTask", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20CancelConversionTaskGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Создать задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateConversionTaskResult</returns>
        public CreateConversionTaskResult ApiSpasV20CreateConversionTaskGet(int operationIndex = 0)
        {
            ApiResponse<CreateConversionTaskResult> localVarResponse = ApiSpasV20CreateConversionTaskGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Создать задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateConversionTaskResult</returns>
        public ApiResponse<CreateConversionTaskResult> ApiSpasV20CreateConversionTaskGetWithHttpInfo(int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20CreateConversionTaskGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CreateConversionTaskResult>("/api/spas/v2.0/CreateConversionTask", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20CreateConversionTaskGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Создать задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateConversionTaskResult</returns>
        public async System.Threading.Tasks.Task<CreateConversionTaskResult> ApiSpasV20CreateConversionTaskGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<CreateConversionTaskResult> localVarResponse = await ApiSpasV20CreateConversionTaskGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Создать задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateConversionTaskResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateConversionTaskResult>> ApiSpasV20CreateConversionTaskGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20CreateConversionTaskGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CreateConversionTaskResult>("/api/spas/v2.0/CreateConversionTask", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20CreateConversionTaskGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получить статус задачи и статистику выполнения 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConversionTaskStatusAndStatistics</returns>
        public ConversionTaskStatusAndStatistics ApiSpasV20GetConversionTaskStatusGet(Guid? taskGuid = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<ConversionTaskStatusAndStatistics> localVarResponse = ApiSpasV20GetConversionTaskStatusGetWithHttpInfo(taskGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получить статус задачи и статистику выполнения 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConversionTaskStatusAndStatistics</returns>
        public ApiResponse<ConversionTaskStatusAndStatistics> ApiSpasV20GetConversionTaskStatusGetWithHttpInfo(Guid? taskGuid = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskGuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "task_guid", taskGuid));
            }

            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20GetConversionTaskStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConversionTaskStatusAndStatistics>("/api/spas/v2.0/GetConversionTaskStatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetConversionTaskStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получить статус задачи и статистику выполнения 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConversionTaskStatusAndStatistics</returns>
        public async System.Threading.Tasks.Task<ConversionTaskStatusAndStatistics> ApiSpasV20GetConversionTaskStatusGetAsync(Guid? taskGuid = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ConversionTaskStatusAndStatistics> localVarResponse = await ApiSpasV20GetConversionTaskStatusGetWithHttpInfoAsync(taskGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получить статус задачи и статистику выполнения 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConversionTaskStatusAndStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConversionTaskStatusAndStatistics>> ApiSpasV20GetConversionTaskStatusGetWithHttpInfoAsync(Guid? taskGuid = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskGuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "task_guid", taskGuid));
            }

            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20GetConversionTaskStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConversionTaskStatusAndStatistics>("/api/spas/v2.0/GetConversionTaskStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetConversionTaskStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получить блок идентификаторов адресных элементов, полученных при конвертации 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="blockIndex">Номер блока данных (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConvertionResultBlockResult</returns>
        public ConvertionResultBlockResult ApiSpasV20GetConvertionResultBlockGet(Guid? taskGuid = default(Guid?), long? blockIndex = default(long?), int operationIndex = 0)
        {
            ApiResponse<ConvertionResultBlockResult> localVarResponse = ApiSpasV20GetConvertionResultBlockGetWithHttpInfo(taskGuid, blockIndex);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получить блок идентификаторов адресных элементов, полученных при конвертации 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="blockIndex">Номер блока данных (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConvertionResultBlockResult</returns>
        public ApiResponse<ConvertionResultBlockResult> ApiSpasV20GetConvertionResultBlockGetWithHttpInfo(Guid? taskGuid = default(Guid?), long? blockIndex = default(long?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskGuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "task_guid", taskGuid));
            }
            if (blockIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "block_index", blockIndex));
            }

            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20GetConvertionResultBlockGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ConvertionResultBlockResult>("/api/spas/v2.0/GetConvertionResultBlock", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetConvertionResultBlockGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получить блок идентификаторов адресных элементов, полученных при конвертации 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="blockIndex">Номер блока данных (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvertionResultBlockResult</returns>
        public async System.Threading.Tasks.Task<ConvertionResultBlockResult> ApiSpasV20GetConvertionResultBlockGetAsync(Guid? taskGuid = default(Guid?), long? blockIndex = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<ConvertionResultBlockResult> localVarResponse = await ApiSpasV20GetConvertionResultBlockGetWithHttpInfoAsync(taskGuid, blockIndex, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получить блок идентификаторов адресных элементов, полученных при конвертации 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="blockIndex">Номер блока данных (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvertionResultBlockResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ConvertionResultBlockResult>> ApiSpasV20GetConvertionResultBlockGetWithHttpInfoAsync(Guid? taskGuid = default(Guid?), long? blockIndex = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskGuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "task_guid", taskGuid));
            }
            if (blockIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "block_index", blockIndex));
            }

            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20GetConvertionResultBlockGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConvertionResultBlockResult>("/api/spas/v2.0/GetConvertionResultBlock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetConvertionResultBlockGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Поиск объекта ФИАС по частям его адреса 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredAddress">Входные данные (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchByPartsResult</returns>
        public SearchByPartsResult ApiSpasV20SearchByPartsPost(StructuredAddress structuredAddress = default(StructuredAddress), int operationIndex = 0)
        {
            ApiResponse<SearchByPartsResult> localVarResponse = ApiSpasV20SearchByPartsPostWithHttpInfo(structuredAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Поиск объекта ФИАС по частям его адреса 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredAddress">Входные данные (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchByPartsResult</returns>
        public ApiResponse<SearchByPartsResult> ApiSpasV20SearchByPartsPostWithHttpInfo(StructuredAddress structuredAddress = default(StructuredAddress), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = structuredAddress;

            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20SearchByPartsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchByPartsResult>("/api/spas/v2.0/SearchByParts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20SearchByPartsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Поиск объекта ФИАС по частям его адреса 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredAddress">Входные данные (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchByPartsResult</returns>
        public async System.Threading.Tasks.Task<SearchByPartsResult> ApiSpasV20SearchByPartsPostAsync(StructuredAddress structuredAddress = default(StructuredAddress), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<SearchByPartsResult> localVarResponse = await ApiSpasV20SearchByPartsPostWithHttpInfoAsync(structuredAddress, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Поиск объекта ФИАС по частям его адреса 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="structuredAddress">Входные данные (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchByPartsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SearchByPartsResult>> ApiSpasV20SearchByPartsPostWithHttpInfoAsync(StructuredAddress structuredAddress = default(StructuredAddress), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = structuredAddress;

            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20SearchByPartsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchByPartsResult>("/api/spas/v2.0/SearchByParts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20SearchByPartsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запустить задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessResult</returns>
        public SuccessResult ApiSpasV20StartConversionTaskGet(Guid? taskGuid = default(Guid?), int operationIndex = 0)
        {
            ApiResponse<SuccessResult> localVarResponse = ApiSpasV20StartConversionTaskGetWithHttpInfo(taskGuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запустить задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessResult</returns>
        public ApiResponse<SuccessResult> ApiSpasV20StartConversionTaskGetWithHttpInfo(Guid? taskGuid = default(Guid?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskGuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "task_guid", taskGuid));
            }

            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20StartConversionTaskGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SuccessResult>("/api/spas/v2.0/StartConversionTask", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20StartConversionTaskGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Запустить задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessResult</returns>
        public async System.Threading.Tasks.Task<SuccessResult> ApiSpasV20StartConversionTaskGetAsync(Guid? taskGuid = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<SuccessResult> localVarResponse = await ApiSpasV20StartConversionTaskGetWithHttpInfoAsync(taskGuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Запустить задачу на конвертацию адресов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskGuid">Идентификатор задачи (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResult>> ApiSpasV20StartConversionTaskGetWithHttpInfoAsync(Guid? taskGuid = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskGuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "task_guid", taskGuid));
            }

            localVarRequestOptions.Operation = "ConversionApi.ApiSpasV20StartConversionTaskGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SuccessResult>("/api/spas/v2.0/StartConversionTask", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20StartConversionTaskGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
