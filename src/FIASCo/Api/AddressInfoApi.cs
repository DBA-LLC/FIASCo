/*
 * SPAS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FIASCo.Client;
using FIASCo.Model;

namespace FIASCo.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressInfoApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Получение адресного элемента по кадастровому номеру
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadastralNumber"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressesResult</returns>
        AddressesResult ApiSpasV20GetAddressItemByCadastralNumberGet(string cadastralNumber = default(string), AddressType? addressType = default(AddressType?), int operationIndex = 0);

        /// <summary>
        /// Получение адресного элемента по кадастровому номеру
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadastralNumber"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressesResult</returns>
        ApiResponse<AddressesResult> ApiSpasV20GetAddressItemByCadastralNumberGetWithHttpInfo(string cadastralNumber = default(string), AddressType? addressType = default(AddressType?), int operationIndex = 0);
        /// <summary>
        /// Получение адресного элемента по уникальному идентификатору ФИАС
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectGuid"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressesResult</returns>
        AddressesResult ApiSpasV20GetAddressItemByGuidGet(Guid? objectGuid = default(Guid?), AddressType? addressType = default(AddressType?), int operationIndex = 0);

        /// <summary>
        /// Получение адресного элемента по уникальному идентификатору ФИАС
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectGuid"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressesResult</returns>
        ApiResponse<AddressesResult> ApiSpasV20GetAddressItemByGuidGetWithHttpInfo(Guid? objectGuid = default(Guid?), AddressType? addressType = default(AddressType?), int operationIndex = 0);
        /// <summary>
        /// Получение адресного элемента по идентификатору
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressesResult</returns>
        AddressesResult ApiSpasV20GetAddressItemByIdGet(long? objectId = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0);

        /// <summary>
        /// Получение адресного элемента по идентификатору
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressesResult</returns>
        ApiResponse<AddressesResult> ApiSpasV20GetAddressItemByIdGetWithHttpInfo(long? objectId = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0);
        /// <summary>
        /// Получить список дочерних элементов, соответствующих заданным фильтрам
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressesResult</returns>
        AddressesResult ApiSpasV20GetAddressItemsPost(FilterObject filterObject = default(FilterObject), int operationIndex = 0);

        /// <summary>
        /// Получить список дочерних элементов, соответствующих заданным фильтрам
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressesResult</returns>
        ApiResponse<AddressesResult> ApiSpasV20GetAddressItemsPostWithHttpInfo(FilterObject filterObject = default(FilterObject), int operationIndex = 0);
        /// <summary>
        /// Получить дополнительную информацию для заданного адресного элемента
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Идентификатор адресного элемента (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressDetailsResult</returns>
        AddressDetailsResult ApiSpasV20GetDetailsGet(long? objectId = default(long?), int operationIndex = 0);

        /// <summary>
        /// Получить дополнительную информацию для заданного адресного элемента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Идентификатор адресного элемента (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressDetailsResult</returns>
        ApiResponse<AddressDetailsResult> ApiSpasV20GetDetailsGetWithHttpInfo(long? objectId = default(long?), int operationIndex = 0);
        /// <summary>
        /// Получение типов объектов ФИАС
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FiasTypesResult</returns>
        FiasTypesResult ApiSpasV20GetFiasObjectTypesGet(int operationIndex = 0);

        /// <summary>
        /// Получение типов объектов ФИАС
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FiasTypesResult</returns>
        ApiResponse<FiasTypesResult> ApiSpasV20GetFiasObjectTypesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Получить список регионов
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressesResult</returns>
        AddressesResult ApiSpasV20GetRegionsGet(int operationIndex = 0);

        /// <summary>
        /// Получить список регионов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressesResult</returns>
        ApiResponse<AddressesResult> ApiSpasV20GetRegionsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Проверка, имеет ли элемент parent дочерние элементы до уровня up_to_level
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent"> (optional)</param>
        /// <param name="upToLevel"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CheckResult</returns>
        CheckResult ApiSpasV20HasDescendantsGet(long? parent = default(long?), int? upToLevel = default(int?), AddressType? addressType = default(AddressType?), int operationIndex = 0);

        /// <summary>
        /// Проверка, имеет ли элемент parent дочерние элементы до уровня up_to_level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent"> (optional)</param>
        /// <param name="upToLevel"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CheckResult</returns>
        ApiResponse<CheckResult> ApiSpasV20HasDescendantsGetWithHttpInfo(long? parent = default(long?), int? upToLevel = default(int?), AddressType? addressType = default(AddressType?), int operationIndex = 0);
        /// <summary>
        /// Проверка, является ли элемент ancestor родительским элементом в иерархии для элемента descendant
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ancestor">Идентификатор родительского элемента (optional)</param>
        /// <param name="descendant">Идентификатор дочернего элемента (optional)</param>
        /// <param name="addressType">Вид представления адреса: 1 - административное деление 2 - муниципальное деление (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CheckResult</returns>
        CheckResult ApiSpasV20IsDescendantGet(long? ancestor = default(long?), long? descendant = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0);

        /// <summary>
        /// Проверка, является ли элемент ancestor родительским элементом в иерархии для элемента descendant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ancestor">Идентификатор родительского элемента (optional)</param>
        /// <param name="descendant">Идентификатор дочернего элемента (optional)</param>
        /// <param name="addressType">Вид представления адреса: 1 - административное деление 2 - муниципальное деление (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CheckResult</returns>
        ApiResponse<CheckResult> ApiSpasV20IsDescendantGetWithHttpInfo(long? ancestor = default(long?), long? descendant = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressInfoApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Получение адресного элемента по кадастровому номеру
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadastralNumber"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressesResult</returns>
        System.Threading.Tasks.Task<AddressesResult> ApiSpasV20GetAddressItemByCadastralNumberGetAsync(string cadastralNumber = default(string), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Получение адресного элемента по кадастровому номеру
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadastralNumber"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressesResult>> ApiSpasV20GetAddressItemByCadastralNumberGetWithHttpInfoAsync(string cadastralNumber = default(string), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Получение адресного элемента по уникальному идентификатору ФИАС
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectGuid"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressesResult</returns>
        System.Threading.Tasks.Task<AddressesResult> ApiSpasV20GetAddressItemByGuidGetAsync(Guid? objectGuid = default(Guid?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Получение адресного элемента по уникальному идентификатору ФИАС
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectGuid"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressesResult>> ApiSpasV20GetAddressItemByGuidGetWithHttpInfoAsync(Guid? objectGuid = default(Guid?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Получение адресного элемента по идентификатору
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressesResult</returns>
        System.Threading.Tasks.Task<AddressesResult> ApiSpasV20GetAddressItemByIdGetAsync(long? objectId = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Получение адресного элемента по идентификатору
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressesResult>> ApiSpasV20GetAddressItemByIdGetWithHttpInfoAsync(long? objectId = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Получить список дочерних элементов, соответствующих заданным фильтрам
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressesResult</returns>
        System.Threading.Tasks.Task<AddressesResult> ApiSpasV20GetAddressItemsPostAsync(FilterObject filterObject = default(FilterObject), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Получить список дочерних элементов, соответствующих заданным фильтрам
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressesResult>> ApiSpasV20GetAddressItemsPostWithHttpInfoAsync(FilterObject filterObject = default(FilterObject), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Получить дополнительную информацию для заданного адресного элемента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Идентификатор адресного элемента (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressDetailsResult</returns>
        System.Threading.Tasks.Task<AddressDetailsResult> ApiSpasV20GetDetailsGetAsync(long? objectId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Получить дополнительную информацию для заданного адресного элемента
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Идентификатор адресного элемента (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressDetailsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressDetailsResult>> ApiSpasV20GetDetailsGetWithHttpInfoAsync(long? objectId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Получение типов объектов ФИАС
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FiasTypesResult</returns>
        System.Threading.Tasks.Task<FiasTypesResult> ApiSpasV20GetFiasObjectTypesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Получение типов объектов ФИАС
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FiasTypesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<FiasTypesResult>> ApiSpasV20GetFiasObjectTypesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Получить список регионов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressesResult</returns>
        System.Threading.Tasks.Task<AddressesResult> ApiSpasV20GetRegionsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Получить список регионов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressesResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddressesResult>> ApiSpasV20GetRegionsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Проверка, имеет ли элемент parent дочерние элементы до уровня up_to_level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent"> (optional)</param>
        /// <param name="upToLevel"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckResult</returns>
        System.Threading.Tasks.Task<CheckResult> ApiSpasV20HasDescendantsGetAsync(long? parent = default(long?), int? upToLevel = default(int?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Проверка, имеет ли элемент parent дочерние элементы до уровня up_to_level
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent"> (optional)</param>
        /// <param name="upToLevel"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckResult>> ApiSpasV20HasDescendantsGetWithHttpInfoAsync(long? parent = default(long?), int? upToLevel = default(int?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Проверка, является ли элемент ancestor родительским элементом в иерархии для элемента descendant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ancestor">Идентификатор родительского элемента (optional)</param>
        /// <param name="descendant">Идентификатор дочернего элемента (optional)</param>
        /// <param name="addressType">Вид представления адреса: 1 - административное деление 2 - муниципальное деление (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckResult</returns>
        System.Threading.Tasks.Task<CheckResult> ApiSpasV20IsDescendantGetAsync(long? ancestor = default(long?), long? descendant = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Проверка, является ли элемент ancestor родительским элементом в иерархии для элемента descendant
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ancestor">Идентификатор родительского элемента (optional)</param>
        /// <param name="descendant">Идентификатор дочернего элемента (optional)</param>
        /// <param name="addressType">Вид представления адреса: 1 - административное деление 2 - муниципальное деление (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckResult>> ApiSpasV20IsDescendantGetWithHttpInfoAsync(long? ancestor = default(long?), long? descendant = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressInfoApi : IAddressInfoApiSync, IAddressInfoApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressInfoApi : IAddressInfoApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressInfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressInfoApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressInfoApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressInfoApi(string basePath)
        {
            this.Configuration = FIASCo.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FIASCo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressInfoApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressInfoApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FIASCo.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FIASCo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressInfoApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AddressInfoApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FIASCo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Получение адресного элемента по кадастровому номеру 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadastralNumber"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressesResult</returns>
        public AddressesResult ApiSpasV20GetAddressItemByCadastralNumberGet(string cadastralNumber = default(string), AddressType? addressType = default(AddressType?), int operationIndex = 0)
        {
            ApiResponse<AddressesResult> localVarResponse = ApiSpasV20GetAddressItemByCadastralNumberGetWithHttpInfo(cadastralNumber, addressType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получение адресного элемента по кадастровому номеру 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadastralNumber"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressesResult</returns>
        public ApiResponse<AddressesResult> ApiSpasV20GetAddressItemByCadastralNumberGetWithHttpInfo(string cadastralNumber = default(string), AddressType? addressType = default(AddressType?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cadastralNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "cadastral_number", cadastralNumber));
            }
            if (addressType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address_type", addressType));
            }

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetAddressItemByCadastralNumberGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AddressesResult>("/api/spas/v2.0/GetAddressItemByCadastralNumber", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetAddressItemByCadastralNumberGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получение адресного элемента по кадастровому номеру 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadastralNumber"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressesResult</returns>
        public async System.Threading.Tasks.Task<AddressesResult> ApiSpasV20GetAddressItemByCadastralNumberGetAsync(string cadastralNumber = default(string), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<AddressesResult> localVarResponse = await ApiSpasV20GetAddressItemByCadastralNumberGetWithHttpInfoAsync(cadastralNumber, addressType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получение адресного элемента по кадастровому номеру 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cadastralNumber"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressesResult>> ApiSpasV20GetAddressItemByCadastralNumberGetWithHttpInfoAsync(string cadastralNumber = default(string), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (cadastralNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "cadastral_number", cadastralNumber));
            }
            if (addressType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address_type", addressType));
            }

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetAddressItemByCadastralNumberGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AddressesResult>("/api/spas/v2.0/GetAddressItemByCadastralNumber", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetAddressItemByCadastralNumberGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получение адресного элемента по уникальному идентификатору ФИАС 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectGuid"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressesResult</returns>
        public AddressesResult ApiSpasV20GetAddressItemByGuidGet(Guid? objectGuid = default(Guid?), AddressType? addressType = default(AddressType?), int operationIndex = 0)
        {
            ApiResponse<AddressesResult> localVarResponse = ApiSpasV20GetAddressItemByGuidGetWithHttpInfo(objectGuid, addressType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получение адресного элемента по уникальному идентификатору ФИАС 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectGuid"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressesResult</returns>
        public ApiResponse<AddressesResult> ApiSpasV20GetAddressItemByGuidGetWithHttpInfo(Guid? objectGuid = default(Guid?), AddressType? addressType = default(AddressType?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (objectGuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "object_guid", objectGuid));
            }
            if (addressType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address_type", addressType));
            }

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetAddressItemByGuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AddressesResult>("/api/spas/v2.0/GetAddressItemByGuid", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetAddressItemByGuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получение адресного элемента по уникальному идентификатору ФИАС 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectGuid"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressesResult</returns>
        public async System.Threading.Tasks.Task<AddressesResult> ApiSpasV20GetAddressItemByGuidGetAsync(Guid? objectGuid = default(Guid?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<AddressesResult> localVarResponse = await ApiSpasV20GetAddressItemByGuidGetWithHttpInfoAsync(objectGuid, addressType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получение адресного элемента по уникальному идентификатору ФИАС 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectGuid"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressesResult>> ApiSpasV20GetAddressItemByGuidGetWithHttpInfoAsync(Guid? objectGuid = default(Guid?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (objectGuid != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "object_guid", objectGuid));
            }
            if (addressType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address_type", addressType));
            }

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetAddressItemByGuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AddressesResult>("/api/spas/v2.0/GetAddressItemByGuid", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetAddressItemByGuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получение адресного элемента по идентификатору 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressesResult</returns>
        public AddressesResult ApiSpasV20GetAddressItemByIdGet(long? objectId = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0)
        {
            ApiResponse<AddressesResult> localVarResponse = ApiSpasV20GetAddressItemByIdGetWithHttpInfo(objectId, addressType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получение адресного элемента по идентификатору 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressesResult</returns>
        public ApiResponse<AddressesResult> ApiSpasV20GetAddressItemByIdGetWithHttpInfo(long? objectId = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (objectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "object_id", objectId));
            }
            if (addressType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address_type", addressType));
            }

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetAddressItemByIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AddressesResult>("/api/spas/v2.0/GetAddressItemById", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetAddressItemByIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получение адресного элемента по идентификатору 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressesResult</returns>
        public async System.Threading.Tasks.Task<AddressesResult> ApiSpasV20GetAddressItemByIdGetAsync(long? objectId = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<AddressesResult> localVarResponse = await ApiSpasV20GetAddressItemByIdGetWithHttpInfoAsync(objectId, addressType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получение адресного элемента по идентификатору 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressesResult>> ApiSpasV20GetAddressItemByIdGetWithHttpInfoAsync(long? objectId = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (objectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "object_id", objectId));
            }
            if (addressType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address_type", addressType));
            }

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetAddressItemByIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AddressesResult>("/api/spas/v2.0/GetAddressItemById", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetAddressItemByIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получить список дочерних элементов, соответствующих заданным фильтрам 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressesResult</returns>
        public AddressesResult ApiSpasV20GetAddressItemsPost(FilterObject filterObject = default(FilterObject), int operationIndex = 0)
        {
            ApiResponse<AddressesResult> localVarResponse = ApiSpasV20GetAddressItemsPostWithHttpInfo(filterObject);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получить список дочерних элементов, соответствующих заданным фильтрам 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressesResult</returns>
        public ApiResponse<AddressesResult> ApiSpasV20GetAddressItemsPostWithHttpInfo(FilterObject filterObject = default(FilterObject), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = filterObject;

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetAddressItemsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddressesResult>("/api/spas/v2.0/GetAddressItems", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetAddressItemsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получить список дочерних элементов, соответствующих заданным фильтрам 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressesResult</returns>
        public async System.Threading.Tasks.Task<AddressesResult> ApiSpasV20GetAddressItemsPostAsync(FilterObject filterObject = default(FilterObject), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<AddressesResult> localVarResponse = await ApiSpasV20GetAddressItemsPostWithHttpInfoAsync(filterObject, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получить список дочерних элементов, соответствующих заданным фильтрам 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterObject"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressesResult>> ApiSpasV20GetAddressItemsPostWithHttpInfoAsync(FilterObject filterObject = default(FilterObject), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = filterObject;

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetAddressItemsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddressesResult>("/api/spas/v2.0/GetAddressItems", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetAddressItemsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получить дополнительную информацию для заданного адресного элемента 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Идентификатор адресного элемента (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressDetailsResult</returns>
        public AddressDetailsResult ApiSpasV20GetDetailsGet(long? objectId = default(long?), int operationIndex = 0)
        {
            ApiResponse<AddressDetailsResult> localVarResponse = ApiSpasV20GetDetailsGetWithHttpInfo(objectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получить дополнительную информацию для заданного адресного элемента 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Идентификатор адресного элемента (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressDetailsResult</returns>
        public ApiResponse<AddressDetailsResult> ApiSpasV20GetDetailsGetWithHttpInfo(long? objectId = default(long?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (objectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "object_id", objectId));
            }

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AddressDetailsResult>("/api/spas/v2.0/GetDetails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получить дополнительную информацию для заданного адресного элемента 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Идентификатор адресного элемента (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressDetailsResult</returns>
        public async System.Threading.Tasks.Task<AddressDetailsResult> ApiSpasV20GetDetailsGetAsync(long? objectId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<AddressDetailsResult> localVarResponse = await ApiSpasV20GetDetailsGetWithHttpInfoAsync(objectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получить дополнительную информацию для заданного адресного элемента 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectId">Идентификатор адресного элемента (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressDetailsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressDetailsResult>> ApiSpasV20GetDetailsGetWithHttpInfoAsync(long? objectId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (objectId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "object_id", objectId));
            }

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetDetailsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AddressDetailsResult>("/api/spas/v2.0/GetDetails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetDetailsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получение типов объектов ФИАС 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>FiasTypesResult</returns>
        public FiasTypesResult ApiSpasV20GetFiasObjectTypesGet(int operationIndex = 0)
        {
            ApiResponse<FiasTypesResult> localVarResponse = ApiSpasV20GetFiasObjectTypesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получение типов объектов ФИАС 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of FiasTypesResult</returns>
        public ApiResponse<FiasTypesResult> ApiSpasV20GetFiasObjectTypesGetWithHttpInfo(int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetFiasObjectTypesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FiasTypesResult>("/api/spas/v2.0/GetFiasObjectTypes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetFiasObjectTypesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получение типов объектов ФИАС 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FiasTypesResult</returns>
        public async System.Threading.Tasks.Task<FiasTypesResult> ApiSpasV20GetFiasObjectTypesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<FiasTypesResult> localVarResponse = await ApiSpasV20GetFiasObjectTypesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получение типов объектов ФИАС 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FiasTypesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FiasTypesResult>> ApiSpasV20GetFiasObjectTypesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetFiasObjectTypesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<FiasTypesResult>("/api/spas/v2.0/GetFiasObjectTypes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetFiasObjectTypesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получить список регионов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddressesResult</returns>
        public AddressesResult ApiSpasV20GetRegionsGet(int operationIndex = 0)
        {
            ApiResponse<AddressesResult> localVarResponse = ApiSpasV20GetRegionsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получить список регионов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddressesResult</returns>
        public ApiResponse<AddressesResult> ApiSpasV20GetRegionsGetWithHttpInfo(int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetRegionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AddressesResult>("/api/spas/v2.0/GetRegions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetRegionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Получить список регионов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddressesResult</returns>
        public async System.Threading.Tasks.Task<AddressesResult> ApiSpasV20GetRegionsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<AddressesResult> localVarResponse = await ApiSpasV20GetRegionsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получить список регионов 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddressesResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddressesResult>> ApiSpasV20GetRegionsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20GetRegionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AddressesResult>("/api/spas/v2.0/GetRegions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetRegionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Проверка, имеет ли элемент parent дочерние элементы до уровня up_to_level 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent"> (optional)</param>
        /// <param name="upToLevel"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CheckResult</returns>
        public CheckResult ApiSpasV20HasDescendantsGet(long? parent = default(long?), int? upToLevel = default(int?), AddressType? addressType = default(AddressType?), int operationIndex = 0)
        {
            ApiResponse<CheckResult> localVarResponse = ApiSpasV20HasDescendantsGetWithHttpInfo(parent, upToLevel, addressType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Проверка, имеет ли элемент parent дочерние элементы до уровня up_to_level 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent"> (optional)</param>
        /// <param name="upToLevel"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CheckResult</returns>
        public ApiResponse<CheckResult> ApiSpasV20HasDescendantsGetWithHttpInfo(long? parent = default(long?), int? upToLevel = default(int?), AddressType? addressType = default(AddressType?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "parent", parent));
            }
            if (upToLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "up_to_level", upToLevel));
            }
            if (addressType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address_type", addressType));
            }

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20HasDescendantsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CheckResult>("/api/spas/v2.0/HasDescendants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20HasDescendantsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Проверка, имеет ли элемент parent дочерние элементы до уровня up_to_level 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent"> (optional)</param>
        /// <param name="upToLevel"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckResult</returns>
        public async System.Threading.Tasks.Task<CheckResult> ApiSpasV20HasDescendantsGetAsync(long? parent = default(long?), int? upToLevel = default(int?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<CheckResult> localVarResponse = await ApiSpasV20HasDescendantsGetWithHttpInfoAsync(parent, upToLevel, addressType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Проверка, имеет ли элемент parent дочерние элементы до уровня up_to_level 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="parent"> (optional)</param>
        /// <param name="upToLevel"> (optional)</param>
        /// <param name="addressType"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckResult>> ApiSpasV20HasDescendantsGetWithHttpInfoAsync(long? parent = default(long?), int? upToLevel = default(int?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (parent != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "parent", parent));
            }
            if (upToLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "up_to_level", upToLevel));
            }
            if (addressType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address_type", addressType));
            }

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20HasDescendantsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CheckResult>("/api/spas/v2.0/HasDescendants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20HasDescendantsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Проверка, является ли элемент ancestor родительским элементом в иерархии для элемента descendant 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ancestor">Идентификатор родительского элемента (optional)</param>
        /// <param name="descendant">Идентификатор дочернего элемента (optional)</param>
        /// <param name="addressType">Вид представления адреса: 1 - административное деление 2 - муниципальное деление (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CheckResult</returns>
        public CheckResult ApiSpasV20IsDescendantGet(long? ancestor = default(long?), long? descendant = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0)
        {
            ApiResponse<CheckResult> localVarResponse = ApiSpasV20IsDescendantGetWithHttpInfo(ancestor, descendant, addressType);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Проверка, является ли элемент ancestor родительским элементом в иерархии для элемента descendant 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ancestor">Идентификатор родительского элемента (optional)</param>
        /// <param name="descendant">Идентификатор дочернего элемента (optional)</param>
        /// <param name="addressType">Вид представления адреса: 1 - административное деление 2 - муниципальное деление (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CheckResult</returns>
        public ApiResponse<CheckResult> ApiSpasV20IsDescendantGetWithHttpInfo(long? ancestor = default(long?), long? descendant = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ancestor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "ancestor", ancestor));
            }
            if (descendant != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "descendant", descendant));
            }
            if (addressType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address_type", addressType));
            }

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20IsDescendantGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CheckResult>("/api/spas/v2.0/IsDescendant", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20IsDescendantGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Проверка, является ли элемент ancestor родительским элементом в иерархии для элемента descendant 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ancestor">Идентификатор родительского элемента (optional)</param>
        /// <param name="descendant">Идентификатор дочернего элемента (optional)</param>
        /// <param name="addressType">Вид представления адреса: 1 - административное деление 2 - муниципальное деление (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CheckResult</returns>
        public async System.Threading.Tasks.Task<CheckResult> ApiSpasV20IsDescendantGetAsync(long? ancestor = default(long?), long? descendant = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<CheckResult> localVarResponse = await ApiSpasV20IsDescendantGetWithHttpInfoAsync(ancestor, descendant, addressType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Проверка, является ли элемент ancestor родительским элементом в иерархии для элемента descendant 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="ancestor">Идентификатор родительского элемента (optional)</param>
        /// <param name="descendant">Идентификатор дочернего элемента (optional)</param>
        /// <param name="addressType">Вид представления адреса: 1 - административное деление 2 - муниципальное деление (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CheckResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckResult>> ApiSpasV20IsDescendantGetWithHttpInfoAsync(long? ancestor = default(long?), long? descendant = default(long?), AddressType? addressType = default(AddressType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ancestor != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "ancestor", ancestor));
            }
            if (descendant != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "descendant", descendant));
            }
            if (addressType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "address_type", addressType));
            }

            localVarRequestOptions.Operation = "AddressInfoApi.ApiSpasV20IsDescendantGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CheckResult>("/api/spas/v2.0/IsDescendant", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20IsDescendantGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
