/*
 * SPAS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using FIASCo.Client;
using FIASCo.Model;

namespace FIASCo.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChangesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Поставить задачу на получение списка адресных объектов, изменённых в указанный интервал времени и отобранных по критериям
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Дата начала поиска изменений (optional)</param>
        /// <param name="endDate">Дата кокончания поиска изменений (optional)</param>
        /// <param name="changeMask">Маска для отбора изменений (optional)</param>
        /// <param name="regionCode">Код региона, для которого происходит поиск изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdResult</returns>
        IdResult ApiSpasV20GetChangesGet(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? changeMask = default(int?), int? regionCode = default(int?), int operationIndex = 0);

        /// <summary>
        /// Поставить задачу на получение списка адресных объектов, изменённых в указанный интервал времени и отобранных по критериям
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Дата начала поиска изменений (optional)</param>
        /// <param name="endDate">Дата кокончания поиска изменений (optional)</param>
        /// <param name="changeMask">Маска для отбора изменений (optional)</param>
        /// <param name="regionCode">Код региона, для которого происходит поиск изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdResult</returns>
        ApiResponse<IdResult> ApiSpasV20GetChangesGetWithHttpInfo(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? changeMask = default(int?), int? regionCode = default(int?), int operationIndex = 0);
        /// <summary>
        /// Сервис для получения типов объектов ФИАС
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="blockIndex">Только актуальные на тек момент (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IFetchChangesTaskResultBlock</returns>
        IFetchChangesTaskResultBlock ApiSpasV20GetSearchResultBlockGet(long? taskId = default(long?), int? blockIndex = default(int?), int operationIndex = 0);

        /// <summary>
        /// Сервис для получения типов объектов ФИАС
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="blockIndex">Только актуальные на тек момент (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IFetchChangesTaskResultBlock</returns>
        ApiResponse<IFetchChangesTaskResultBlock> ApiSpasV20GetSearchResultBlockGetWithHttpInfo(long? taskId = default(long?), int? blockIndex = default(int?), int operationIndex = 0);
        /// <summary>
        /// Сервис для получения состояния задачи по поиску изменений
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IFetchChangesTaskStatus</returns>
        IFetchChangesTaskStatus ApiSpasV20GetSearchTaskStatusGet(long? taskId = default(long?), int operationIndex = 0);

        /// <summary>
        /// Сервис для получения состояния задачи по поиску изменений
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IFetchChangesTaskStatus</returns>
        ApiResponse<IFetchChangesTaskStatus> ApiSpasV20GetSearchTaskStatusGetWithHttpInfo(long? taskId = default(long?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChangesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Поставить задачу на получение списка адресных объектов, изменённых в указанный интервал времени и отобранных по критериям
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Дата начала поиска изменений (optional)</param>
        /// <param name="endDate">Дата кокончания поиска изменений (optional)</param>
        /// <param name="changeMask">Маска для отбора изменений (optional)</param>
        /// <param name="regionCode">Код региона, для которого происходит поиск изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResult</returns>
        System.Threading.Tasks.Task<IdResult> ApiSpasV20GetChangesGetAsync(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? changeMask = default(int?), int? regionCode = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Поставить задачу на получение списка адресных объектов, изменённых в указанный интервал времени и отобранных по критериям
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Дата начала поиска изменений (optional)</param>
        /// <param name="endDate">Дата кокончания поиска изменений (optional)</param>
        /// <param name="changeMask">Маска для отбора изменений (optional)</param>
        /// <param name="regionCode">Код региона, для которого происходит поиск изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdResult>> ApiSpasV20GetChangesGetWithHttpInfoAsync(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? changeMask = default(int?), int? regionCode = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Сервис для получения типов объектов ФИАС
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="blockIndex">Только актуальные на тек момент (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IFetchChangesTaskResultBlock</returns>
        System.Threading.Tasks.Task<IFetchChangesTaskResultBlock> ApiSpasV20GetSearchResultBlockGetAsync(long? taskId = default(long?), int? blockIndex = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Сервис для получения типов объектов ФИАС
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="blockIndex">Только актуальные на тек момент (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IFetchChangesTaskResultBlock)</returns>
        System.Threading.Tasks.Task<ApiResponse<IFetchChangesTaskResultBlock>> ApiSpasV20GetSearchResultBlockGetWithHttpInfoAsync(long? taskId = default(long?), int? blockIndex = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Сервис для получения состояния задачи по поиску изменений
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IFetchChangesTaskStatus</returns>
        System.Threading.Tasks.Task<IFetchChangesTaskStatus> ApiSpasV20GetSearchTaskStatusGetAsync(long? taskId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Сервис для получения состояния задачи по поиску изменений
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IFetchChangesTaskStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<IFetchChangesTaskStatus>> ApiSpasV20GetSearchTaskStatusGetWithHttpInfoAsync(long? taskId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChangesApi : IChangesApiSync, IChangesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChangesApi : IChangesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChangesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChangesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChangesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChangesApi(string basePath)
        {
            this.Configuration = FIASCo.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = FIASCo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChangesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChangesApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = FIASCo.Client.Configuration.MergeConfigurations(
                GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = FIASCo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChangesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChangesApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = FIASCo.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Поставить задачу на получение списка адресных объектов, изменённых в указанный интервал времени и отобранных по критериям 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Дата начала поиска изменений (optional)</param>
        /// <param name="endDate">Дата кокончания поиска изменений (optional)</param>
        /// <param name="changeMask">Маска для отбора изменений (optional)</param>
        /// <param name="regionCode">Код региона, для которого происходит поиск изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IdResult</returns>
        public IdResult ApiSpasV20GetChangesGet(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? changeMask = default(int?), int? regionCode = default(int?), int operationIndex = 0)
        {
            ApiResponse<IdResult> localVarResponse = ApiSpasV20GetChangesGetWithHttpInfo(startDate, endDate, changeMask, regionCode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Поставить задачу на получение списка адресных объектов, изменённых в указанный интервал времени и отобранных по критериям 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Дата начала поиска изменений (optional)</param>
        /// <param name="endDate">Дата кокончания поиска изменений (optional)</param>
        /// <param name="changeMask">Маска для отбора изменений (optional)</param>
        /// <param name="regionCode">Код региона, для которого происходит поиск изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IdResult</returns>
        public ApiResponse<IdResult> ApiSpasV20GetChangesGetWithHttpInfo(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? changeMask = default(int?), int? regionCode = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (changeMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "changeMask", changeMask));
            }
            if (regionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "regionCode", regionCode));
            }

            localVarRequestOptions.Operation = "ChangesApi.ApiSpasV20GetChangesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IdResult>("/api/spas/v2.0/GetChanges", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetChangesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Поставить задачу на получение списка адресных объектов, изменённых в указанный интервал времени и отобранных по критериям 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Дата начала поиска изменений (optional)</param>
        /// <param name="endDate">Дата кокончания поиска изменений (optional)</param>
        /// <param name="changeMask">Маска для отбора изменений (optional)</param>
        /// <param name="regionCode">Код региона, для которого происходит поиск изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IdResult</returns>
        public async System.Threading.Tasks.Task<IdResult> ApiSpasV20GetChangesGetAsync(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? changeMask = default(int?), int? regionCode = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<IdResult> localVarResponse = await ApiSpasV20GetChangesGetWithHttpInfoAsync(startDate, endDate, changeMask, regionCode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Поставить задачу на получение списка адресных объектов, изменённых в указанный интервал времени и отобранных по критериям 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate">Дата начала поиска изменений (optional)</param>
        /// <param name="endDate">Дата кокончания поиска изменений (optional)</param>
        /// <param name="changeMask">Маска для отбора изменений (optional)</param>
        /// <param name="regionCode">Код региона, для которого происходит поиск изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IdResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdResult>> ApiSpasV20GetChangesGetWithHttpInfoAsync(DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?), int? changeMask = default(int?), int? regionCode = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (startDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "startDate", startDate));
            }
            if (endDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "endDate", endDate));
            }
            if (changeMask != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "changeMask", changeMask));
            }
            if (regionCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "regionCode", regionCode));
            }

            localVarRequestOptions.Operation = "ChangesApi.ApiSpasV20GetChangesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IdResult>("/api/spas/v2.0/GetChanges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetChangesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Сервис для получения типов объектов ФИАС 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="blockIndex">Только актуальные на тек момент (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IFetchChangesTaskResultBlock</returns>
        public IFetchChangesTaskResultBlock ApiSpasV20GetSearchResultBlockGet(long? taskId = default(long?), int? blockIndex = default(int?), int operationIndex = 0)
        {
            ApiResponse<IFetchChangesTaskResultBlock> localVarResponse = ApiSpasV20GetSearchResultBlockGetWithHttpInfo(taskId, blockIndex);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Сервис для получения типов объектов ФИАС 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="blockIndex">Только актуальные на тек момент (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IFetchChangesTaskResultBlock</returns>
        public ApiResponse<IFetchChangesTaskResultBlock> ApiSpasV20GetSearchResultBlockGetWithHttpInfo(long? taskId = default(long?), int? blockIndex = default(int?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (blockIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "blockIndex", blockIndex));
            }

            localVarRequestOptions.Operation = "ChangesApi.ApiSpasV20GetSearchResultBlockGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IFetchChangesTaskResultBlock>("/api/spas/v2.0/GetSearchResultBlock", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetSearchResultBlockGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Сервис для получения типов объектов ФИАС 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="blockIndex">Только актуальные на тек момент (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IFetchChangesTaskResultBlock</returns>
        public async System.Threading.Tasks.Task<IFetchChangesTaskResultBlock> ApiSpasV20GetSearchResultBlockGetAsync(long? taskId = default(long?), int? blockIndex = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<IFetchChangesTaskResultBlock> localVarResponse = await ApiSpasV20GetSearchResultBlockGetWithHttpInfoAsync(taskId, blockIndex, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Сервис для получения типов объектов ФИАС 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="blockIndex">Только актуальные на тек момент (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IFetchChangesTaskResultBlock)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IFetchChangesTaskResultBlock>> ApiSpasV20GetSearchResultBlockGetWithHttpInfoAsync(long? taskId = default(long?), int? blockIndex = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }
            if (blockIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "blockIndex", blockIndex));
            }

            localVarRequestOptions.Operation = "ChangesApi.ApiSpasV20GetSearchResultBlockGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IFetchChangesTaskResultBlock>("/api/spas/v2.0/GetSearchResultBlock", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetSearchResultBlockGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Сервис для получения состояния задачи по поиску изменений 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>IFetchChangesTaskStatus</returns>
        public IFetchChangesTaskStatus ApiSpasV20GetSearchTaskStatusGet(long? taskId = default(long?), int operationIndex = 0)
        {
            ApiResponse<IFetchChangesTaskStatus> localVarResponse = ApiSpasV20GetSearchTaskStatusGetWithHttpInfo(taskId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Сервис для получения состояния задачи по поиску изменений 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of IFetchChangesTaskStatus</returns>
        public ApiResponse<IFetchChangesTaskStatus> ApiSpasV20GetSearchTaskStatusGetWithHttpInfo(long? taskId = default(long?), int operationIndex = 0)
        {
            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }

            localVarRequestOptions.Operation = "ChangesApi.ApiSpasV20GetSearchTaskStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<IFetchChangesTaskStatus>("/api/spas/v2.0/GetSearchTaskStatus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetSearchTaskStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Сервис для получения состояния задачи по поиску изменений 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IFetchChangesTaskStatus</returns>
        public async System.Threading.Tasks.Task<IFetchChangesTaskStatus> ApiSpasV20GetSearchTaskStatusGetAsync(long? taskId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ApiResponse<IFetchChangesTaskStatus> localVarResponse = await ApiSpasV20GetSearchTaskStatusGetWithHttpInfoAsync(taskId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Сервис для получения состояния задачи по поиску изменений 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskId">Номер задачи по поиску изменений (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IFetchChangesTaskStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IFetchChangesTaskStatus>> ApiSpasV20GetSearchTaskStatusGetWithHttpInfoAsync(long? taskId = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            RequestOptions localVarRequestOptions = new RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (taskId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ClientUtils.ParameterToMultiMap("", "taskId", taskId));
            }

            localVarRequestOptions.Operation = "ChangesApi.ApiSpasV20GetSearchTaskStatusGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (master-token) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("master-token")))
            {
                localVarRequestOptions.HeaderParameters.Add("master-token", this.Configuration.GetApiKeyWithPrefix("master-token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<IFetchChangesTaskStatus>("/api/spas/v2.0/GetSearchTaskStatus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSpasV20GetSearchTaskStatusGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
