/*
 * SPAS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FIASCo.Client.OpenAPIDateConverter;

namespace FIASCo.Model
{
    /// <summary>
    /// NoticeAddress
    /// </summary>
    [DataContract(Name = "NoticeAddress")]
    public partial class NoticeAddress : IEquatable<NoticeAddress>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AddressType
        /// </summary>
        [DataMember(Name = "address_type", EmitDefaultValue = false)]
        public AddressType? AddressType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NoticeAddress" /> class.
        /// </summary>
        /// <param name="fullName">fullName.</param>
        /// <param name="oktmo">oktmo.</param>
        /// <param name="regionCode">regionCode.</param>
        /// <param name="cadastralNumber">cadastralNumber.</param>
        /// <param name="addressType">addressType.</param>
        /// <param name="address">address.</param>
        public NoticeAddress(string fullName = default(string), string oktmo = default(string), string regionCode = default(string), string cadastralNumber = default(string), AddressType? addressType = default(AddressType?), StructuredAddress address = default(StructuredAddress))
        {
            this.FullName = fullName;
            this.Oktmo = oktmo;
            this.RegionCode = regionCode;
            this.CadastralNumber = cadastralNumber;
            this.AddressType = addressType;
            this.Address = address;
        }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "full_name", EmitDefaultValue = true)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets Oktmo
        /// </summary>
        [DataMember(Name = "oktmo", EmitDefaultValue = true)]
        public string Oktmo { get; set; }

        /// <summary>
        /// Gets or Sets RegionCode
        /// </summary>
        [DataMember(Name = "region_code", EmitDefaultValue = true)]
        public string RegionCode { get; set; }

        /// <summary>
        /// Gets or Sets CadastralNumber
        /// </summary>
        [DataMember(Name = "cadastral_number", EmitDefaultValue = true)]
        public string CadastralNumber { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public StructuredAddress Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NoticeAddress {\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Oktmo: ").Append(Oktmo).Append("\n");
            sb.Append("  RegionCode: ").Append(RegionCode).Append("\n");
            sb.Append("  CadastralNumber: ").Append(CadastralNumber).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NoticeAddress);
        }

        /// <summary>
        /// Returns true if NoticeAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of NoticeAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NoticeAddress input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Oktmo == input.Oktmo ||
                    (this.Oktmo != null &&
                    this.Oktmo.Equals(input.Oktmo))
                ) && 
                (
                    this.RegionCode == input.RegionCode ||
                    (this.RegionCode != null &&
                    this.RegionCode.Equals(input.RegionCode))
                ) && 
                (
                    this.CadastralNumber == input.CadastralNumber ||
                    (this.CadastralNumber != null &&
                    this.CadastralNumber.Equals(input.CadastralNumber))
                ) && 
                (
                    this.AddressType == input.AddressType ||
                    this.AddressType.Equals(input.AddressType)
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                if (this.Oktmo != null)
                {
                    hashCode = (hashCode * 59) + this.Oktmo.GetHashCode();
                }
                if (this.RegionCode != null)
                {
                    hashCode = (hashCode * 59) + this.RegionCode.GetHashCode();
                }
                if (this.CadastralNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CadastralNumber.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddressType.GetHashCode();
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
