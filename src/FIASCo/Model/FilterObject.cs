/*
 * SPAS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FIASCo.Client.OpenAPIDateConverter;

namespace FIASCo.Model
{
    /// <summary>
    /// FilterObject
    /// </summary>
    [DataContract(Name = "FilterObject")]
    public partial class FilterObject : IEquatable<FilterObject>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AddressLevel
        /// </summary>
        [DataMember(Name = "address_level", EmitDefaultValue = false)]
        public AddressLevel? AddressLevel { get; set; }

        /// <summary>
        /// Gets or Sets AddressType
        /// </summary>
        [DataMember(Name = "address_type", EmitDefaultValue = false)]
        public AddressType? AddressType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterObject" /> class.
        /// </summary>
        /// <param name="path">path.</param>
        /// <param name="addressLevel">addressLevel.</param>
        /// <param name="addressLevels">addressLevels.</param>
        /// <param name="namePart">namePart.</param>
        /// <param name="addressType">addressType.</param>
        /// <param name="includeDescendants">includeDescendants.</param>
        public FilterObject(string path = default(string), AddressLevel? addressLevel = default(AddressLevel?), List<AddressLevel> addressLevels = default(List<AddressLevel>), string namePart = default(string), AddressType? addressType = default(AddressType?), bool includeDescendants = default(bool))
        {
            this.Path = path;
            this.AddressLevel = addressLevel;
            this.AddressLevels = addressLevels;
            this.NamePart = namePart;
            this.AddressType = addressType;
            this.IncludeDescendants = includeDescendants;
        }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name = "path", EmitDefaultValue = true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets AddressLevels
        /// </summary>
        [DataMember(Name = "address_levels", EmitDefaultValue = true)]
        public List<AddressLevel> AddressLevels { get; set; }

        /// <summary>
        /// Gets or Sets NamePart
        /// </summary>
        [DataMember(Name = "name_part", EmitDefaultValue = true)]
        public string NamePart { get; set; }

        /// <summary>
        /// Gets or Sets IncludeDescendants
        /// </summary>
        [DataMember(Name = "include_descendants", EmitDefaultValue = true)]
        public bool IncludeDescendants { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FilterObject {\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  AddressLevel: ").Append(AddressLevel).Append("\n");
            sb.Append("  AddressLevels: ").Append(AddressLevels).Append("\n");
            sb.Append("  NamePart: ").Append(NamePart).Append("\n");
            sb.Append("  AddressType: ").Append(AddressType).Append("\n");
            sb.Append("  IncludeDescendants: ").Append(IncludeDescendants).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterObject);
        }

        /// <summary>
        /// Returns true if FilterObject instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.AddressLevel == input.AddressLevel ||
                    this.AddressLevel.Equals(input.AddressLevel)
                ) && 
                (
                    this.AddressLevels == input.AddressLevels ||
                    this.AddressLevels != null &&
                    input.AddressLevels != null &&
                    this.AddressLevels.SequenceEqual(input.AddressLevels)
                ) && 
                (
                    this.NamePart == input.NamePart ||
                    (this.NamePart != null &&
                    this.NamePart.Equals(input.NamePart))
                ) && 
                (
                    this.AddressType == input.AddressType ||
                    this.AddressType.Equals(input.AddressType)
                ) && 
                (
                    this.IncludeDescendants == input.IncludeDescendants ||
                    this.IncludeDescendants.Equals(input.IncludeDescendants)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Path != null)
                {
                    hashCode = (hashCode * 59) + this.Path.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddressLevel.GetHashCode();
                if (this.AddressLevels != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLevels.GetHashCode();
                }
                if (this.NamePart != null)
                {
                    hashCode = (hashCode * 59) + this.NamePart.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AddressType.GetHashCode();
                hashCode = (hashCode * 59) + this.IncludeDescendants.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
