/*
 * SPAS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FIASCo.Client.OpenAPIDateConverter;

namespace FIASCo.Model
{
    /// <summary>
    /// Результат возвращающий идентификатор уведомления
    /// </summary>
    [DataContract(Name = "GetNoticeStatusResult")]
    public partial class GetNoticeStatusResult : IEquatable<GetNoticeStatusResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetNoticeStatusResult" /> class.
        /// </summary>
        /// <param name="status">статус обработки уведомления.</param>
        /// <param name="statusDate">дата обработки уведомления.</param>
        /// <param name="objectId">идентификатор ФИАС.</param>
        /// <param name="objectGuid">идентификатор ФИАС.</param>
        /// <param name="errorCode">код ошибки.</param>
        /// <param name="errorMessage">сообщение об ошибке.</param>
        /// <param name="requestId">Идентификатор запроса.</param>
        public GetNoticeStatusResult(int status = default(int), DateTime statusDate = default(DateTime), long? objectId = default(long?), Guid? objectGuid = default(Guid?), int? errorCode = default(int?), string errorMessage = default(string), string requestId = default(string))
        {
            this.Status = status;
            this.StatusDate = statusDate;
            this.ObjectId = objectId;
            this.ObjectGuid = objectGuid;
            this.ErrorCode = errorCode;
            this.ErrorMessage = errorMessage;
            this.RequestId = requestId;
        }

        /// <summary>
        /// статус обработки уведомления
        /// </summary>
        /// <value>статус обработки уведомления</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public int Status { get; set; }

        /// <summary>
        /// дата обработки уведомления
        /// </summary>
        /// <value>дата обработки уведомления</value>
        [DataMember(Name = "status_date", EmitDefaultValue = false)]
        public DateTime StatusDate { get; set; }

        /// <summary>
        /// идентификатор ФИАС
        /// </summary>
        /// <value>идентификатор ФИАС</value>
        [DataMember(Name = "object_id", EmitDefaultValue = true)]
        public long? ObjectId { get; set; }

        /// <summary>
        /// идентификатор ФИАС
        /// </summary>
        /// <value>идентификатор ФИАС</value>
        [DataMember(Name = "object_guid", EmitDefaultValue = true)]
        public Guid? ObjectGuid { get; set; }

        /// <summary>
        /// код ошибки
        /// </summary>
        /// <value>код ошибки</value>
        [DataMember(Name = "error_code", EmitDefaultValue = true)]
        public int? ErrorCode { get; set; }

        /// <summary>
        /// сообщение об ошибке
        /// </summary>
        /// <value>сообщение об ошибке</value>
        [DataMember(Name = "error_message", EmitDefaultValue = true)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Идентификатор запроса
        /// </summary>
        /// <value>Идентификатор запроса</value>
        [DataMember(Name = "request_id", EmitDefaultValue = true)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetNoticeStatusResult {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDate: ").Append(StatusDate).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  ObjectGuid: ").Append(ObjectGuid).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetNoticeStatusResult);
        }

        /// <summary>
        /// Returns true if GetNoticeStatusResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetNoticeStatusResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetNoticeStatusResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.StatusDate == input.StatusDate ||
                    (this.StatusDate != null &&
                    this.StatusDate.Equals(input.StatusDate))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.ObjectGuid == input.ObjectGuid ||
                    (this.ObjectGuid != null &&
                    this.ObjectGuid.Equals(input.ObjectGuid))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.StatusDate != null)
                {
                    hashCode = (hashCode * 59) + this.StatusDate.GetHashCode();
                }
                if (this.ObjectId != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectId.GetHashCode();
                }
                if (this.ObjectGuid != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectGuid.GetHashCode();
                }
                if (this.ErrorCode != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                }
                if (this.ErrorMessage != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMessage.GetHashCode();
                }
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
