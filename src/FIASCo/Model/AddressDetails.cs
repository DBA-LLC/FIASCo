/*
 * SPAS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FIASCo.Client.OpenAPIDateConverter;

namespace FIASCo.Model
{
    /// <summary>
    /// AddressDetails
    /// </summary>
    [DataContract(Name = "AddressDetails")]
    public partial class AddressDetails : IEquatable<AddressDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressDetails" /> class.
        /// </summary>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="ifnsUl">ifnsUl.</param>
        /// <param name="ifnsFl">ifnsFl.</param>
        /// <param name="ifnsTul">ifnsTul.</param>
        /// <param name="ifnsTfl">ifnsTfl.</param>
        /// <param name="okato">okato.</param>
        /// <param name="oktmo">oktmo.</param>
        /// <param name="kladrCode">kladrCode.</param>
        /// <param name="cadastralNumber">cadastralNumber.</param>
        /// <param name="apartBuilding">apartBuilding.</param>
        /// <param name="removeCadastr">removeCadastr.</param>
        /// <param name="oktmoBudget">oktmoBudget.</param>
        public AddressDetails(string postalCode = default(string), string ifnsUl = default(string), string ifnsFl = default(string), string ifnsTul = default(string), string ifnsTfl = default(string), string okato = default(string), string oktmo = default(string), string kladrCode = default(string), string cadastralNumber = default(string), string apartBuilding = default(string), string removeCadastr = default(string), string oktmoBudget = default(string))
        {
            this.PostalCode = postalCode;
            this.IfnsUl = ifnsUl;
            this.IfnsFl = ifnsFl;
            this.IfnsTul = ifnsTul;
            this.IfnsTfl = ifnsTfl;
            this.Okato = okato;
            this.Oktmo = oktmo;
            this.KladrCode = kladrCode;
            this.CadastralNumber = cadastralNumber;
            this.ApartBuilding = apartBuilding;
            this.RemoveCadastr = removeCadastr;
            this.OktmoBudget = oktmoBudget;
        }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "postal_code", EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets IfnsUl
        /// </summary>
        [DataMember(Name = "ifns_ul", EmitDefaultValue = true)]
        public string IfnsUl { get; set; }

        /// <summary>
        /// Gets or Sets IfnsFl
        /// </summary>
        [DataMember(Name = "ifns_fl", EmitDefaultValue = true)]
        public string IfnsFl { get; set; }

        /// <summary>
        /// Gets or Sets IfnsTul
        /// </summary>
        [DataMember(Name = "ifns_tul", EmitDefaultValue = true)]
        public string IfnsTul { get; set; }

        /// <summary>
        /// Gets or Sets IfnsTfl
        /// </summary>
        [DataMember(Name = "ifns_tfl", EmitDefaultValue = true)]
        public string IfnsTfl { get; set; }

        /// <summary>
        /// Gets or Sets Okato
        /// </summary>
        [DataMember(Name = "okato", EmitDefaultValue = true)]
        public string Okato { get; set; }

        /// <summary>
        /// Gets or Sets Oktmo
        /// </summary>
        [DataMember(Name = "oktmo", EmitDefaultValue = true)]
        public string Oktmo { get; set; }

        /// <summary>
        /// Gets or Sets KladrCode
        /// </summary>
        [DataMember(Name = "kladr_code", EmitDefaultValue = true)]
        public string KladrCode { get; set; }

        /// <summary>
        /// Gets or Sets CadastralNumber
        /// </summary>
        [DataMember(Name = "cadastral_number", EmitDefaultValue = true)]
        public string CadastralNumber { get; set; }

        /// <summary>
        /// Gets or Sets ApartBuilding
        /// </summary>
        [DataMember(Name = "apart_building", EmitDefaultValue = true)]
        public string ApartBuilding { get; set; }

        /// <summary>
        /// Gets or Sets RemoveCadastr
        /// </summary>
        [DataMember(Name = "remove_cadastr", EmitDefaultValue = true)]
        public string RemoveCadastr { get; set; }

        /// <summary>
        /// Gets or Sets OktmoBudget
        /// </summary>
        [DataMember(Name = "oktmo_budget", EmitDefaultValue = true)]
        public string OktmoBudget { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddressDetails {\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  IfnsUl: ").Append(IfnsUl).Append("\n");
            sb.Append("  IfnsFl: ").Append(IfnsFl).Append("\n");
            sb.Append("  IfnsTul: ").Append(IfnsTul).Append("\n");
            sb.Append("  IfnsTfl: ").Append(IfnsTfl).Append("\n");
            sb.Append("  Okato: ").Append(Okato).Append("\n");
            sb.Append("  Oktmo: ").Append(Oktmo).Append("\n");
            sb.Append("  KladrCode: ").Append(KladrCode).Append("\n");
            sb.Append("  CadastralNumber: ").Append(CadastralNumber).Append("\n");
            sb.Append("  ApartBuilding: ").Append(ApartBuilding).Append("\n");
            sb.Append("  RemoveCadastr: ").Append(RemoveCadastr).Append("\n");
            sb.Append("  OktmoBudget: ").Append(OktmoBudget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressDetails);
        }

        /// <summary>
        /// Returns true if AddressDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.IfnsUl == input.IfnsUl ||
                    (this.IfnsUl != null &&
                    this.IfnsUl.Equals(input.IfnsUl))
                ) && 
                (
                    this.IfnsFl == input.IfnsFl ||
                    (this.IfnsFl != null &&
                    this.IfnsFl.Equals(input.IfnsFl))
                ) && 
                (
                    this.IfnsTul == input.IfnsTul ||
                    (this.IfnsTul != null &&
                    this.IfnsTul.Equals(input.IfnsTul))
                ) && 
                (
                    this.IfnsTfl == input.IfnsTfl ||
                    (this.IfnsTfl != null &&
                    this.IfnsTfl.Equals(input.IfnsTfl))
                ) && 
                (
                    this.Okato == input.Okato ||
                    (this.Okato != null &&
                    this.Okato.Equals(input.Okato))
                ) && 
                (
                    this.Oktmo == input.Oktmo ||
                    (this.Oktmo != null &&
                    this.Oktmo.Equals(input.Oktmo))
                ) && 
                (
                    this.KladrCode == input.KladrCode ||
                    (this.KladrCode != null &&
                    this.KladrCode.Equals(input.KladrCode))
                ) && 
                (
                    this.CadastralNumber == input.CadastralNumber ||
                    (this.CadastralNumber != null &&
                    this.CadastralNumber.Equals(input.CadastralNumber))
                ) && 
                (
                    this.ApartBuilding == input.ApartBuilding ||
                    (this.ApartBuilding != null &&
                    this.ApartBuilding.Equals(input.ApartBuilding))
                ) && 
                (
                    this.RemoveCadastr == input.RemoveCadastr ||
                    (this.RemoveCadastr != null &&
                    this.RemoveCadastr.Equals(input.RemoveCadastr))
                ) && 
                (
                    this.OktmoBudget == input.OktmoBudget ||
                    (this.OktmoBudget != null &&
                    this.OktmoBudget.Equals(input.OktmoBudget))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.IfnsUl != null)
                {
                    hashCode = (hashCode * 59) + this.IfnsUl.GetHashCode();
                }
                if (this.IfnsFl != null)
                {
                    hashCode = (hashCode * 59) + this.IfnsFl.GetHashCode();
                }
                if (this.IfnsTul != null)
                {
                    hashCode = (hashCode * 59) + this.IfnsTul.GetHashCode();
                }
                if (this.IfnsTfl != null)
                {
                    hashCode = (hashCode * 59) + this.IfnsTfl.GetHashCode();
                }
                if (this.Okato != null)
                {
                    hashCode = (hashCode * 59) + this.Okato.GetHashCode();
                }
                if (this.Oktmo != null)
                {
                    hashCode = (hashCode * 59) + this.Oktmo.GetHashCode();
                }
                if (this.KladrCode != null)
                {
                    hashCode = (hashCode * 59) + this.KladrCode.GetHashCode();
                }
                if (this.CadastralNumber != null)
                {
                    hashCode = (hashCode * 59) + this.CadastralNumber.GetHashCode();
                }
                if (this.ApartBuilding != null)
                {
                    hashCode = (hashCode * 59) + this.ApartBuilding.GetHashCode();
                }
                if (this.RemoveCadastr != null)
                {
                    hashCode = (hashCode * 59) + this.RemoveCadastr.GetHashCode();
                }
                if (this.OktmoBudget != null)
                {
                    hashCode = (hashCode * 59) + this.OktmoBudget.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
