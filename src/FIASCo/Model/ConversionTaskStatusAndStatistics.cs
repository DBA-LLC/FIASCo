/*
 * SPAS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FIASCo.Client.OpenAPIDateConverter;

namespace FIASCo.Model
{
    /// <summary>
    /// ConversionTaskStatusAndStatistics
    /// </summary>
    [DataContract(Name = "ConversionTaskStatusAndStatistics")]
    public partial class ConversionTaskStatusAndStatistics : IEquatable<ConversionTaskStatusAndStatistics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionTaskStatusAndStatistics" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="totalRecords">totalRecords.</param>
        /// <param name="processed">processed.</param>
        /// <param name="converted">converted.</param>
        /// <param name="nonconverted">nonconverted.</param>
        /// <param name="blockCount">blockCount.</param>
        public ConversionTaskStatusAndStatistics(string status = default(string), long totalRecords = default(long), long processed = default(long), long converted = default(long), long nonconverted = default(long), long blockCount = default(long))
        {
            this.Status = status;
            this.TotalRecords = totalRecords;
            this.Processed = processed;
            this.Converted = converted;
            this.Nonconverted = nonconverted;
            this.BlockCount = blockCount;
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TotalRecords
        /// </summary>
        [DataMember(Name = "total_records", EmitDefaultValue = false)]
        public long TotalRecords { get; set; }

        /// <summary>
        /// Gets or Sets Processed
        /// </summary>
        [DataMember(Name = "processed", EmitDefaultValue = false)]
        public long Processed { get; set; }

        /// <summary>
        /// Gets or Sets Converted
        /// </summary>
        [DataMember(Name = "converted", EmitDefaultValue = false)]
        public long Converted { get; set; }

        /// <summary>
        /// Gets or Sets Nonconverted
        /// </summary>
        [DataMember(Name = "nonconverted", EmitDefaultValue = false)]
        public long Nonconverted { get; set; }

        /// <summary>
        /// Gets or Sets BlockCount
        /// </summary>
        [DataMember(Name = "block_count", EmitDefaultValue = false)]
        public long BlockCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConversionTaskStatusAndStatistics {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalRecords: ").Append(TotalRecords).Append("\n");
            sb.Append("  Processed: ").Append(Processed).Append("\n");
            sb.Append("  Converted: ").Append(Converted).Append("\n");
            sb.Append("  Nonconverted: ").Append(Nonconverted).Append("\n");
            sb.Append("  BlockCount: ").Append(BlockCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversionTaskStatusAndStatistics);
        }

        /// <summary>
        /// Returns true if ConversionTaskStatusAndStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversionTaskStatusAndStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversionTaskStatusAndStatistics input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TotalRecords == input.TotalRecords ||
                    this.TotalRecords.Equals(input.TotalRecords)
                ) && 
                (
                    this.Processed == input.Processed ||
                    this.Processed.Equals(input.Processed)
                ) && 
                (
                    this.Converted == input.Converted ||
                    this.Converted.Equals(input.Converted)
                ) && 
                (
                    this.Nonconverted == input.Nonconverted ||
                    this.Nonconverted.Equals(input.Nonconverted)
                ) && 
                (
                    this.BlockCount == input.BlockCount ||
                    this.BlockCount.Equals(input.BlockCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalRecords.GetHashCode();
                hashCode = (hashCode * 59) + this.Processed.GetHashCode();
                hashCode = (hashCode * 59) + this.Converted.GetHashCode();
                hashCode = (hashCode * 59) + this.Nonconverted.GetHashCode();
                hashCode = (hashCode * 59) + this.BlockCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
