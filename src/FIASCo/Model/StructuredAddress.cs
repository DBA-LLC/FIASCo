/*
 * SPAS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FIASCo.Client.OpenAPIDateConverter;

namespace FIASCo.Model
{
    /// <summary>
    /// StructuredAddress
    /// </summary>
    [DataContract(Name = "StructuredAddress")]
    public partial class StructuredAddress : IEquatable<StructuredAddress>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ObjectLevelId
        /// </summary>
        [DataMember(Name = "object_level_id", EmitDefaultValue = false)]
        public AddressLevel? ObjectLevelId { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StructuredAddress" /> class.
        /// </summary>
        /// <param name="region">region.</param>
        /// <param name="district">district.</param>
        /// <param name="citySettlement">citySettlement.</param>
        /// <param name="city">city.</param>
        /// <param name="settlement">settlement.</param>
        /// <param name="street">street.</param>
        /// <param name="planningStructure">planningStructure.</param>
        /// <param name="house">house.</param>
        /// <param name="building">building.</param>
        /// <param name="flat">flat.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="kladrCode">kladrCode.</param>
        /// <param name="objectLevelId">objectLevelId.</param>
        public StructuredAddress(AddressObject region = default(AddressObject), AddressObject district = default(AddressObject), AddressObject citySettlement = default(AddressObject), AddressObject city = default(AddressObject), AddressObject settlement = default(AddressObject), AddressObject street = default(AddressObject), AddressObject planningStructure = default(AddressObject), EstateObject house = default(EstateObject), EstateObject building = default(EstateObject), EstateObject flat = default(EstateObject), string postalCode = default(string), string kladrCode = default(string), AddressLevel? objectLevelId = default(AddressLevel?))
        {
            this.Region = region;
            this.District = district;
            this.CitySettlement = citySettlement;
            this.City = city;
            this.Settlement = settlement;
            this.Street = street;
            this.PlanningStructure = planningStructure;
            this.House = house;
            this.Building = building;
            this.Flat = flat;
            this.PostalCode = postalCode;
            this.KladrCode = kladrCode;
            this.ObjectLevelId = objectLevelId;
        }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public AddressObject Region { get; set; }

        /// <summary>
        /// Gets or Sets District
        /// </summary>
        [DataMember(Name = "district", EmitDefaultValue = false)]
        public AddressObject District { get; set; }

        /// <summary>
        /// Gets or Sets CitySettlement
        /// </summary>
        [DataMember(Name = "city_settlement", EmitDefaultValue = false)]
        public AddressObject CitySettlement { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public AddressObject City { get; set; }

        /// <summary>
        /// Gets or Sets Settlement
        /// </summary>
        [DataMember(Name = "settlement", EmitDefaultValue = false)]
        public AddressObject Settlement { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public AddressObject Street { get; set; }

        /// <summary>
        /// Gets or Sets PlanningStructure
        /// </summary>
        [DataMember(Name = "planning_structure", EmitDefaultValue = false)]
        public AddressObject PlanningStructure { get; set; }

        /// <summary>
        /// Gets or Sets House
        /// </summary>
        [DataMember(Name = "house", EmitDefaultValue = false)]
        public EstateObject House { get; set; }

        /// <summary>
        /// Gets or Sets Building
        /// </summary>
        [DataMember(Name = "building", EmitDefaultValue = false)]
        public EstateObject Building { get; set; }

        /// <summary>
        /// Gets or Sets Flat
        /// </summary>
        [DataMember(Name = "flat", EmitDefaultValue = false)]
        public EstateObject Flat { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "postal_code", EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets KladrCode
        /// </summary>
        [DataMember(Name = "kladr_code", EmitDefaultValue = true)]
        public string KladrCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StructuredAddress {\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  CitySettlement: ").Append(CitySettlement).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Settlement: ").Append(Settlement).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  PlanningStructure: ").Append(PlanningStructure).Append("\n");
            sb.Append("  House: ").Append(House).Append("\n");
            sb.Append("  Building: ").Append(Building).Append("\n");
            sb.Append("  Flat: ").Append(Flat).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  KladrCode: ").Append(KladrCode).Append("\n");
            sb.Append("  ObjectLevelId: ").Append(ObjectLevelId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StructuredAddress);
        }

        /// <summary>
        /// Returns true if StructuredAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of StructuredAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StructuredAddress input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.District == input.District ||
                    (this.District != null &&
                    this.District.Equals(input.District))
                ) && 
                (
                    this.CitySettlement == input.CitySettlement ||
                    (this.CitySettlement != null &&
                    this.CitySettlement.Equals(input.CitySettlement))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Settlement == input.Settlement ||
                    (this.Settlement != null &&
                    this.Settlement.Equals(input.Settlement))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.PlanningStructure == input.PlanningStructure ||
                    (this.PlanningStructure != null &&
                    this.PlanningStructure.Equals(input.PlanningStructure))
                ) && 
                (
                    this.House == input.House ||
                    (this.House != null &&
                    this.House.Equals(input.House))
                ) && 
                (
                    this.Building == input.Building ||
                    (this.Building != null &&
                    this.Building.Equals(input.Building))
                ) && 
                (
                    this.Flat == input.Flat ||
                    (this.Flat != null &&
                    this.Flat.Equals(input.Flat))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.KladrCode == input.KladrCode ||
                    (this.KladrCode != null &&
                    this.KladrCode.Equals(input.KladrCode))
                ) && 
                (
                    this.ObjectLevelId == input.ObjectLevelId ||
                    this.ObjectLevelId.Equals(input.ObjectLevelId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.District != null)
                {
                    hashCode = (hashCode * 59) + this.District.GetHashCode();
                }
                if (this.CitySettlement != null)
                {
                    hashCode = (hashCode * 59) + this.CitySettlement.GetHashCode();
                }
                if (this.City != null)
                {
                    hashCode = (hashCode * 59) + this.City.GetHashCode();
                }
                if (this.Settlement != null)
                {
                    hashCode = (hashCode * 59) + this.Settlement.GetHashCode();
                }
                if (this.Street != null)
                {
                    hashCode = (hashCode * 59) + this.Street.GetHashCode();
                }
                if (this.PlanningStructure != null)
                {
                    hashCode = (hashCode * 59) + this.PlanningStructure.GetHashCode();
                }
                if (this.House != null)
                {
                    hashCode = (hashCode * 59) + this.House.GetHashCode();
                }
                if (this.Building != null)
                {
                    hashCode = (hashCode * 59) + this.Building.GetHashCode();
                }
                if (this.Flat != null)
                {
                    hashCode = (hashCode * 59) + this.Flat.GetHashCode();
                }
                if (this.PostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.PostalCode.GetHashCode();
                }
                if (this.KladrCode != null)
                {
                    hashCode = (hashCode * 59) + this.KladrCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ObjectLevelId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
