/*
 * SPAS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FIASCo.Client.OpenAPIDateConverter;

namespace FIASCo.Model
{
    /// <summary>
    /// FiasType
    /// </summary>
    [DataContract(Name = "FiasType")]
    public partial class FiasType : IEquatable<FiasType>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets AddressLevel
        /// </summary>
        [DataMember(Name = "address_level", EmitDefaultValue = false)]
        public AddressLevel? AddressLevel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FiasType" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="addressLevel">addressLevel.</param>
        /// <param name="typeShortName">typeShortName.</param>
        /// <param name="typeName">typeName.</param>
        /// <param name="description">description.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="formCode">formCode.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        public FiasType(long id = default(long), AddressLevel? addressLevel = default(AddressLevel?), string typeShortName = default(string), string typeName = default(string), string description = default(string), bool isActive = default(bool), string formCode = default(string), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            this.Id = id;
            this.AddressLevel = addressLevel;
            this.TypeShortName = typeShortName;
            this.TypeName = typeName;
            this.Description = description;
            this.IsActive = isActive;
            this.FormCode = formCode;
            this.StartDate = startDate;
            this.EndDate = endDate;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets TypeShortName
        /// </summary>
        [DataMember(Name = "type_short_name", EmitDefaultValue = true)]
        public string TypeShortName { get; set; }

        /// <summary>
        /// Gets or Sets TypeName
        /// </summary>
        [DataMember(Name = "type_name", EmitDefaultValue = true)]
        public string TypeName { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "is_active", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets FormCode
        /// </summary>
        [DataMember(Name = "form_code", EmitDefaultValue = true)]
        public string FormCode { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "start_date", EmitDefaultValue = true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name = "end_date", EmitDefaultValue = true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FiasType {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AddressLevel: ").Append(AddressLevel).Append("\n");
            sb.Append("  TypeShortName: ").Append(TypeShortName).Append("\n");
            sb.Append("  TypeName: ").Append(TypeName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  FormCode: ").Append(FormCode).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FiasType);
        }

        /// <summary>
        /// Returns true if FiasType instances are equal
        /// </summary>
        /// <param name="input">Instance of FiasType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FiasType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.AddressLevel == input.AddressLevel ||
                    this.AddressLevel.Equals(input.AddressLevel)
                ) && 
                (
                    this.TypeShortName == input.TypeShortName ||
                    (this.TypeShortName != null &&
                    this.TypeShortName.Equals(input.TypeShortName))
                ) && 
                (
                    this.TypeName == input.TypeName ||
                    (this.TypeName != null &&
                    this.TypeName.Equals(input.TypeName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    this.IsActive.Equals(input.IsActive)
                ) && 
                (
                    this.FormCode == input.FormCode ||
                    (this.FormCode != null &&
                    this.FormCode.Equals(input.FormCode))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                hashCode = (hashCode * 59) + this.AddressLevel.GetHashCode();
                if (this.TypeShortName != null)
                {
                    hashCode = (hashCode * 59) + this.TypeShortName.GetHashCode();
                }
                if (this.TypeName != null)
                {
                    hashCode = (hashCode * 59) + this.TypeName.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsActive.GetHashCode();
                if (this.FormCode != null)
                {
                    hashCode = (hashCode * 59) + this.FormCode.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.EndDate != null)
                {
                    hashCode = (hashCode * 59) + this.EndDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
