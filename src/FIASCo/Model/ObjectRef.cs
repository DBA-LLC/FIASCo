/*
 * SPAS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FIASCo.Client.OpenAPIDateConverter;

namespace FIASCo.Model
{
    /// <summary>
    /// ObjectRef
    /// </summary>
    [DataContract(Name = "ObjectRef")]
    public partial class ObjectRef : IEquatable<ObjectRef>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectRef" /> class.
        /// </summary>
        /// <param name="objectId">objectId.</param>
        /// <param name="objectGuid">objectGuid.</param>
        public ObjectRef(long objectId = default(long), Guid objectGuid = default(Guid))
        {
            this.ObjectId = objectId;
            this.ObjectGuid = objectGuid;
        }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name = "object_id", EmitDefaultValue = false)]
        public long ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets ObjectGuid
        /// </summary>
        [DataMember(Name = "object_guid", EmitDefaultValue = false)]
        public Guid ObjectGuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ObjectRef {\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  ObjectGuid: ").Append(ObjectGuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ObjectRef);
        }

        /// <summary>
        /// Returns true if ObjectRef instances are equal
        /// </summary>
        /// <param name="input">Instance of ObjectRef to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectRef input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.ObjectId == input.ObjectId ||
                    this.ObjectId.Equals(input.ObjectId)
                ) &&
                (
                    this.ObjectGuid == input.ObjectGuid ||
                    (this.ObjectGuid != null &&
                    this.ObjectGuid.Equals(input.ObjectGuid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ObjectId.GetHashCode();
                if (this.ObjectGuid != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectGuid.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
