/*
 * SPAS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = FIASCo.Client.OpenAPIDateConverter;

namespace FIASCo.Model
{
    /// <summary>
    /// Notice
    /// </summary>
    [DataContract(Name = "Notice")]
    public partial class Notice : IEquatable<Notice>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets NoticeType
        /// </summary>
        [DataMember(Name = "notice_type", EmitDefaultValue = false)]
        public NoticeType? NoticeType { get; set; }

        /// <summary>
        /// Gets or Sets SourceType
        /// </summary>
        [DataMember(Name = "source_type", EmitDefaultValue = false)]
        public NoticeSourceType? SourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Notice" /> class.
        /// </summary>
        /// <param name="senderCode">senderCode.</param>
        /// <param name="senderName">senderName.</param>
        /// <param name="noticeType">noticeType.</param>
        /// <param name="sourceType">sourceType.</param>
        /// <param name="requestId">requestId.</param>
        /// <param name="requestDate">requestDate.</param>
        /// <param name="address">address.</param>
        public Notice(string senderCode = default(string), string senderName = default(string), NoticeType? noticeType = default(NoticeType?), NoticeSourceType? sourceType = default(NoticeSourceType?), string requestId = default(string), DateTime requestDate = default(DateTime), NoticeAddress address = default(NoticeAddress))
        {
            this.SenderCode = senderCode;
            this.SenderName = senderName;
            this.NoticeType = noticeType;
            this.SourceType = sourceType;
            this.RequestId = requestId;
            this.RequestDate = requestDate;
            this.Address = address;
        }

        /// <summary>
        /// Gets or Sets SenderCode
        /// </summary>
        [DataMember(Name = "sender_code", EmitDefaultValue = true)]
        public string SenderCode { get; set; }

        /// <summary>
        /// Gets or Sets SenderName
        /// </summary>
        [DataMember(Name = "sender_name", EmitDefaultValue = true)]
        public string SenderName { get; set; }

        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name = "request_id", EmitDefaultValue = true)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets RequestDate
        /// </summary>
        [DataMember(Name = "request_date", EmitDefaultValue = false)]
        public DateTime RequestDate { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public NoticeAddress Address { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Notice {\n");
            sb.Append("  SenderCode: ").Append(SenderCode).Append("\n");
            sb.Append("  SenderName: ").Append(SenderName).Append("\n");
            sb.Append("  NoticeType: ").Append(NoticeType).Append("\n");
            sb.Append("  SourceType: ").Append(SourceType).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  RequestDate: ").Append(RequestDate).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Notice);
        }

        /// <summary>
        /// Returns true if Notice instances are equal
        /// </summary>
        /// <param name="input">Instance of Notice to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Notice input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SenderCode == input.SenderCode ||
                    (this.SenderCode != null &&
                    this.SenderCode.Equals(input.SenderCode))
                ) && 
                (
                    this.SenderName == input.SenderName ||
                    (this.SenderName != null &&
                    this.SenderName.Equals(input.SenderName))
                ) && 
                (
                    this.NoticeType == input.NoticeType ||
                    this.NoticeType.Equals(input.NoticeType)
                ) && 
                (
                    this.SourceType == input.SourceType ||
                    this.SourceType.Equals(input.SourceType)
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.RequestDate == input.RequestDate ||
                    (this.RequestDate != null &&
                    this.RequestDate.Equals(input.RequestDate))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SenderCode != null)
                {
                    hashCode = (hashCode * 59) + this.SenderCode.GetHashCode();
                }
                if (this.SenderName != null)
                {
                    hashCode = (hashCode * 59) + this.SenderName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NoticeType.GetHashCode();
                hashCode = (hashCode * 59) + this.SourceType.GetHashCode();
                if (this.RequestId != null)
                {
                    hashCode = (hashCode * 59) + this.RequestId.GetHashCode();
                }
                if (this.RequestDate != null)
                {
                    hashCode = (hashCode * 59) + this.RequestDate.GetHashCode();
                }
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
